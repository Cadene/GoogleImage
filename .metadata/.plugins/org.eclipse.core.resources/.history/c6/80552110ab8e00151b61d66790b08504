package upmc.ri.struct.training;

import java.util.List;

import upmc.ri.struct.Evaluator;
import upmc.ri.struct.STrainingSample;
import upmc.ri.struct.instantiation.IStructInstantiation;
import upmc.ri.struct.model.IStructModel;
import upmc.ri.utils.VectorOperations;

public class SGDTrainer<X, Y> implements ITrainer<X, Y> {

	private Evaluator<X, Y> evaluator;
	private double eps;
	private double lambda;
	private int max_iter;

	public SGDTrainer(Evaluator<X, Y> evaluator, double eps, double lambda, int max_iter) {
		this.evaluator = evaluator;
		this.eps = eps;
		this.lambda = lambda;
		this.max_iter = max_iter;
	}
	
	@Override
	public void  train(List<STrainingSample<X, Y>> lts , IStructModel<X,Y> model) {
		
	}
	
	private void convex_loss(List<STrainingSample<X, Y>> lts , IStructModel<X,Y> model) {
		double loss = 0;
		double[] parameters = model.getParameters();
		IStructInstantiation<X, Y> instantiation = model.instantiation();
		double norm_l2_w = VectorOperations.norm2(parameters);
		
		loss += this.lambda / 2 * norm_l2_w;
		for (int i = 0; i < lts.size(); i++) {
			STrainingSample<X, Y> sample = lts.get(i);
			X xi = sample.input;
			Y yi = sample.output;
			double old = -9999999999.99;
			for (Y y : instantiation.enumerateY()) {
				Math.max( old, instantiation.delta(yi, y) + VectorOperations.dot(instantiation.psi(xi, y), parameters) );
			}
			
		}
	}
}
